// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: common.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
#if BUILD_HEAP_SWIFT_CORE_FOR_DEVELOPMENT
import SwiftProtobuf
#else
@_implementationOnly import SwiftProtobuf
#endif

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct CoreSdk_V1_Value {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A string-encoded value.
  var string: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// A representation of a library used in to produce an event.
struct CoreSdk_V1_LibraryInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The library name as known by the server.
  var name: String = String()

  /// The library version
  var version: String = String()

  /// The specific platform and version the library targets.
  var platform: String = String()

  /// Library-specific properties.
  var properties: Dictionary<String,CoreSdk_V1_Value> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CoreSdk_V1_ApplicationInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// App name displayed to the user
  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  /// Package or bundle identifier
  var identifier: String {
    get {return _identifier ?? String()}
    set {_identifier = newValue}
  }
  /// Returns true if `identifier` has been explicitly set.
  var hasIdentifier: Bool {return self._identifier != nil}
  /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
  mutating func clearIdentifier() {self._identifier = nil}

  /// Version string displayed to user, e.g. 10.0.
  var versionString: String {
    get {return _versionString ?? String()}
    set {_versionString = newValue}
  }
  /// Returns true if `versionString` has been explicitly set.
  var hasVersionString: Bool {return self._versionString != nil}
  /// Clears the value of `versionString`. Subsequent reads from it will return its default value.
  mutating func clearVersionString() {self._versionString = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _name: String? = nil
  fileprivate var _identifier: String? = nil
  fileprivate var _versionString: String? = nil
}

struct CoreSdk_V1_UserAgentClientHintsInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// heapjs:ubv
  var platformVersion: String = String()

  /// heapjs:upv 
  var browserVersion: String = String()

  /// heapjs:umo
  var model: String {
    get {return _model ?? String()}
    set {_model = newValue}
  }
  /// Returns true if `model` has been explicitly set.
  var hasModel: Bool {return self._model != nil}
  /// Clears the value of `model`. Subsequent reads from it will return its default value.
  mutating func clearModel() {self._model = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _model: String? = nil
}

struct CoreSdk_V1_DeviceInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// E.g., Samsung Galaxy S22, iPhone14,3
  var model: String = String()

  /// E.g., Android 13, iOS 16.0
  var platform: String = String()

  /// For web
  var userAgent: String {
    get {return _userAgent ?? String()}
    set {_userAgent = newValue}
  }
  /// Returns true if `userAgent` has been explicitly set.
  var hasUserAgent: Bool {return self._userAgent != nil}
  /// Clears the value of `userAgent`. Subsequent reads from it will return its default value.
  mutating func clearUserAgent() {self._userAgent = nil}

  var type: CoreSdk_V1_DeviceInfo.DeviceType = .unknownUnspecified

  /// E.g., AT&T
  var carrier: String {
    get {return _carrier ?? String()}
    set {_carrier = newValue}
  }
  /// Returns true if `carrier` has been explicitly set.
  var hasCarrier: Bool {return self._carrier != nil}
  /// Clears the value of `carrier`. Subsequent reads from it will return its default value.
  mutating func clearCarrier() {self._carrier = nil}

  var vendorID: String {
    get {return _vendorID ?? String()}
    set {_vendorID = newValue}
  }
  /// Returns true if `vendorID` has been explicitly set.
  var hasVendorID: Bool {return self._vendorID != nil}
  /// Clears the value of `vendorID`. Subsequent reads from it will return its default value.
  mutating func clearVendorID() {self._vendorID = nil}

  var advertiserID: String {
    get {return _advertiserID ?? String()}
    set {_advertiserID = newValue}
  }
  /// Returns true if `advertiserID` has been explicitly set.
  var hasAdvertiserID: Bool {return self._advertiserID != nil}
  /// Clears the value of `advertiserID`. Subsequent reads from it will return its default value.
  mutating func clearAdvertiserID() {self._advertiserID = nil}

  /// UACH metadata, only chrome browsers
  var uach: CoreSdk_V1_UserAgentClientHintsInfo {
    get {return _uach ?? CoreSdk_V1_UserAgentClientHintsInfo()}
    set {_uach = newValue}
  }
  /// Returns true if `uach` has been explicitly set.
  var hasUach: Bool {return self._uach != nil}
  /// Clears the value of `uach`. Subsequent reads from it will return its default value.
  mutating func clearUach() {self._uach = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum DeviceType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknownUnspecified // = 0
    case mobile // = 1
    case tablet // = 2
    case desktop // = 3
    case tv // = 4
    case watch // = 5
    case automotive // = 6
    case UNRECOGNIZED(Int)

    init() {
      self = .unknownUnspecified
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknownUnspecified
      case 1: self = .mobile
      case 2: self = .tablet
      case 3: self = .desktop
      case 4: self = .tv
      case 5: self = .watch
      case 6: self = .automotive
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknownUnspecified: return 0
      case .mobile: return 1
      case .tablet: return 2
      case .desktop: return 3
      case .tv: return 4
      case .watch: return 5
      case .automotive: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _userAgent: String? = nil
  fileprivate var _carrier: String? = nil
  fileprivate var _vendorID: String? = nil
  fileprivate var _advertiserID: String? = nil
  fileprivate var _uach: CoreSdk_V1_UserAgentClientHintsInfo? = nil
}

#if swift(>=4.2)

extension CoreSdk_V1_DeviceInfo.DeviceType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [CoreSdk_V1_DeviceInfo.DeviceType] = [
    .unknownUnspecified,
    .mobile,
    .tablet,
    .desktop,
    .tv,
    .watch,
    .automotive,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension CoreSdk_V1_Value: @unchecked Sendable {}
extension CoreSdk_V1_LibraryInfo: @unchecked Sendable {}
extension CoreSdk_V1_ApplicationInfo: @unchecked Sendable {}
extension CoreSdk_V1_UserAgentClientHintsInfo: @unchecked Sendable {}
extension CoreSdk_V1_DeviceInfo: @unchecked Sendable {}
extension CoreSdk_V1_DeviceInfo.DeviceType: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "core_sdk.v1"

extension CoreSdk_V1_Value: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Value"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "string"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.string) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.string.isEmpty {
      try visitor.visitSingularStringField(value: self.string, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreSdk_V1_Value, rhs: CoreSdk_V1_Value) -> Bool {
    if lhs.string != rhs.string {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreSdk_V1_LibraryInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LibraryInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "version"),
    3: .same(proto: "platform"),
    4: .same(proto: "properties"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.platform) }()
      case 4: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,CoreSdk_V1_Value>.self, value: &self.properties) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 2)
    }
    if !self.platform.isEmpty {
      try visitor.visitSingularStringField(value: self.platform, fieldNumber: 3)
    }
    if !self.properties.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,CoreSdk_V1_Value>.self, value: self.properties, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreSdk_V1_LibraryInfo, rhs: CoreSdk_V1_LibraryInfo) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.version != rhs.version {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs.properties != rhs.properties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreSdk_V1_ApplicationInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ApplicationInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "identifier"),
    3: .standard(proto: "version_string"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._identifier) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._versionString) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._identifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._versionString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreSdk_V1_ApplicationInfo, rhs: CoreSdk_V1_ApplicationInfo) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._identifier != rhs._identifier {return false}
    if lhs._versionString != rhs._versionString {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreSdk_V1_UserAgentClientHintsInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserAgentClientHintsInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "platform_version"),
    2: .standard(proto: "browser_version"),
    3: .same(proto: "model"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.platformVersion) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.browserVersion) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._model) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.platformVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.platformVersion, fieldNumber: 1)
    }
    if !self.browserVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.browserVersion, fieldNumber: 2)
    }
    try { if let v = self._model {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreSdk_V1_UserAgentClientHintsInfo, rhs: CoreSdk_V1_UserAgentClientHintsInfo) -> Bool {
    if lhs.platformVersion != rhs.platformVersion {return false}
    if lhs.browserVersion != rhs.browserVersion {return false}
    if lhs._model != rhs._model {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreSdk_V1_DeviceInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "model"),
    2: .same(proto: "platform"),
    3: .standard(proto: "user_agent"),
    4: .same(proto: "type"),
    5: .same(proto: "carrier"),
    6: .standard(proto: "vendor_id"),
    7: .standard(proto: "advertiser_id"),
    13: .same(proto: "uach"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.model) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.platform) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._userAgent) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._carrier) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._vendorID) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._advertiserID) }()
      case 13: try { try decoder.decodeSingularMessageField(value: &self._uach) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.model.isEmpty {
      try visitor.visitSingularStringField(value: self.model, fieldNumber: 1)
    }
    if !self.platform.isEmpty {
      try visitor.visitSingularStringField(value: self.platform, fieldNumber: 2)
    }
    try { if let v = self._userAgent {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    if self.type != .unknownUnspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 4)
    }
    try { if let v = self._carrier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._vendorID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._advertiserID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._uach {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreSdk_V1_DeviceInfo, rhs: CoreSdk_V1_DeviceInfo) -> Bool {
    if lhs.model != rhs.model {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs._userAgent != rhs._userAgent {return false}
    if lhs.type != rhs.type {return false}
    if lhs._carrier != rhs._carrier {return false}
    if lhs._vendorID != rhs._vendorID {return false}
    if lhs._advertiserID != rhs._advertiserID {return false}
    if lhs._uach != rhs._uach {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreSdk_V1_DeviceInfo.DeviceType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEVICE_TYPE_UNKNOWN_UNSPECIFIED"),
    1: .same(proto: "DEVICE_TYPE_MOBILE"),
    2: .same(proto: "DEVICE_TYPE_TABLET"),
    3: .same(proto: "DEVICE_TYPE_DESKTOP"),
    4: .same(proto: "DEVICE_TYPE_TV"),
    5: .same(proto: "DEVICE_TYPE_WATCH"),
    6: .same(proto: "DEVICE_TYPE_AUTOMOTIVE"),
  ]
}
