// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: common.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct CoreSdk_V1_Value {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A string-encoded value.
  var string: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// A representation of a library used in to produce an event.
struct CoreSdk_V1_LibraryInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The library name as known by the server.
  var name: String = String()

  /// The library version
  var version: String = String()

  /// The specific platform and version the library targets.
  var platform: String = String()

  /// Library-specific properties.
  var properties: Dictionary<String,CoreSdk_V1_Value> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CoreSdk_V1_ApplicationInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// App name displayed to the user
  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  /// Package or bundle identifier
  var identifier: String {
    get {return _identifier ?? String()}
    set {_identifier = newValue}
  }
  /// Returns true if `identifier` has been explicitly set.
  var hasIdentifier: Bool {return self._identifier != nil}
  /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
  mutating func clearIdentifier() {self._identifier = nil}

  /// Version string displayed to user, e.g. 10.0.
  var versionString: String {
    get {return _versionString ?? String()}
    set {_versionString = newValue}
  }
  /// Returns true if `versionString` has been explicitly set.
  var hasVersionString: Bool {return self._versionString != nil}
  /// Clears the value of `versionString`. Subsequent reads from it will return its default value.
  mutating func clearVersionString() {self._versionString = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _name: String? = nil
  fileprivate var _identifier: String? = nil
  fileprivate var _versionString: String? = nil
}

struct CoreSdk_V1_UserAgentClientHintsInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// heapjs:ubv
  var platformVersion: String = String()

  /// heapjs:upv 
  var browserVersion: String = String()

  /// heapjs:umo
  var model: String {
    get {return _model ?? String()}
    set {_model = newValue}
  }
  /// Returns true if `model` has been explicitly set.
  var hasModel: Bool {return self._model != nil}
  /// Clears the value of `model`. Subsequent reads from it will return its default value.
  mutating func clearModel() {self._model = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _model: String? = nil
}

struct CoreSdk_V1_DeviceInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// E.g., Samsung Galaxy S22, iPhone14,3
  var model: String = String()

  /// E.g., Android 13, iOS 16.0
  var platform: String = String()

  /// For web
  var userAgent: String {
    get {return _userAgent ?? String()}
    set {_userAgent = newValue}
  }
  /// Returns true if `userAgent` has been explicitly set.
  var hasUserAgent: Bool {return self._userAgent != nil}
  /// Clears the value of `userAgent`. Subsequent reads from it will return its default value.
  mutating func clearUserAgent() {self._userAgent = nil}

  var type: CoreSdk_V1_DeviceInfo.DeviceType = .unknownUnspecified

  /// E.g., AT&T
  var carrier: String {
    get {return _carrier ?? String()}
    set {_carrier = newValue}
  }
  /// Returns true if `carrier` has been explicitly set.
  var hasCarrier: Bool {return self._carrier != nil}
  /// Clears the value of `carrier`. Subsequent reads from it will return its default value.
  mutating func clearCarrier() {self._carrier = nil}

  var vendorID: String {
    get {return _vendorID ?? String()}
    set {_vendorID = newValue}
  }
  /// Returns true if `vendorID` has been explicitly set.
  var hasVendorID: Bool {return self._vendorID != nil}
  /// Clears the value of `vendorID`. Subsequent reads from it will return its default value.
  mutating func clearVendorID() {self._vendorID = nil}

  var advertiserID: String {
    get {return _advertiserID ?? String()}
    set {_advertiserID = newValue}
  }
  /// Returns true if `advertiserID` has been explicitly set.
  var hasAdvertiserID: Bool {return self._advertiserID != nil}
  /// Clears the value of `advertiserID`. Subsequent reads from it will return its default value.
  mutating func clearAdvertiserID() {self._advertiserID = nil}

  /// UACH metadata, only chrome browsers
  var uach: CoreSdk_V1_UserAgentClientHintsInfo {
    get {return _uach ?? CoreSdk_V1_UserAgentClientHintsInfo()}
    set {_uach = newValue}
  }
  /// Returns true if `uach` has been explicitly set.
  var hasUach: Bool {return self._uach != nil}
  /// Clears the value of `uach`. Subsequent reads from it will return its default value.
  mutating func clearUach() {self._uach = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum DeviceType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknownUnspecified // = 0
    case mobile // = 1
    case tablet // = 2
    case desktop // = 3
    case tv // = 4
    case watch // = 5
    case automotive // = 6
    case UNRECOGNIZED(Int)

    init() {
      self = .unknownUnspecified
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknownUnspecified
      case 1: self = .mobile
      case 2: self = .tablet
      case 3: self = .desktop
      case 4: self = .tv
      case 5: self = .watch
      case 6: self = .automotive
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknownUnspecified: return 0
      case .mobile: return 1
      case .tablet: return 2
      case .desktop: return 3
      case .tv: return 4
      case .watch: return 5
      case .automotive: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _userAgent: String? = nil
  fileprivate var _carrier: String? = nil
  fileprivate var _vendorID: String? = nil
  fileprivate var _advertiserID: String? = nil
  fileprivate var _uach: CoreSdk_V1_UserAgentClientHintsInfo? = nil
}

#if swift(>=4.2)

extension CoreSdk_V1_DeviceInfo.DeviceType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [CoreSdk_V1_DeviceInfo.DeviceType] = [
    .unknownUnspecified,
    .mobile,
    .tablet,
    .desktop,
    .tv,
    .watch,
    .automotive,
  ]
}

#endif  // swift(>=4.2)

/// SessionInfo sub-property definition
struct CoreSdk_V1_SessionInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// string id
  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// time of type google.protobuf.Timestamp
  var time: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._time ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return _storage._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {_uniqueStorage()._time = nil}

  /// referrer
  var referrer: String {
    get {return _storage._referrer ?? String()}
    set {_uniqueStorage()._referrer = newValue}
  }
  /// Returns true if `referrer` has been explicitly set.
  var hasReferrer: Bool {return _storage._referrer != nil}
  /// Clears the value of `referrer`. Subsequent reads from it will return its default value.
  mutating func clearReferrer() {_uniqueStorage()._referrer = nil}

  /// search_keyword
  var searchKeyword: String {
    get {return _storage._searchKeyword ?? String()}
    set {_uniqueStorage()._searchKeyword = newValue}
  }
  /// Returns true if `searchKeyword` has been explicitly set.
  var hasSearchKeyword: Bool {return _storage._searchKeyword != nil}
  /// Clears the value of `searchKeyword`. Subsequent reads from it will return its default value.
  mutating func clearSearchKeyword() {_uniqueStorage()._searchKeyword = nil}

  /// utm
  var utm: CoreSdk_V1_Utm {
    get {return _storage._utm ?? CoreSdk_V1_Utm()}
    set {_uniqueStorage()._utm = newValue}
  }
  /// Returns true if `utm` has been explicitly set.
  var hasUtm: Bool {return _storage._utm != nil}
  /// Clears the value of `utm`. Subsequent reads from it will return its default value.
  mutating func clearUtm() {_uniqueStorage()._utm = nil}

  /// PageviewInfo object
  var initialPageviewInfo: CoreSdk_V1_PageviewInfo {
    get {return _storage._initialPageviewInfo ?? CoreSdk_V1_PageviewInfo()}
    set {_uniqueStorage()._initialPageviewInfo = newValue}
  }
  /// Returns true if `initialPageviewInfo` has been explicitly set.
  var hasInitialPageviewInfo: Bool {return _storage._initialPageviewInfo != nil}
  /// Clears the value of `initialPageviewInfo`. Subsequent reads from it will return its default value.
  mutating func clearInitialPageviewInfo() {_uniqueStorage()._initialPageviewInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Pageview property defintion
struct CoreSdk_V1_PageviewInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Pageview id. (heapjs:v)
  var id: String = String()

  /// heapjs:ts
  var time: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _time ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return self._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {self._time = nil}

  /// View controller, activity, ReactNative control name
  var componentOrClassName: String {
    get {return _componentOrClassName ?? String()}
    set {_componentOrClassName = newValue}
  }
  /// Returns true if `componentOrClassName` has been explicitly set.
  var hasComponentOrClassName: Bool {return self._componentOrClassName != nil}
  /// Clears the value of `componentOrClassName`. Subsequent reads from it will return its default value.
  mutating func clearComponentOrClassName() {self._componentOrClassName = nil}

  /// Web page or view controller title
  var title: String {
    get {return _title ?? String()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  /// Web page URL
  var url: CoreSdk_V1_PageviewInfo.Url {
    get {return _url ?? CoreSdk_V1_PageviewInfo.Url()}
    set {_url = newValue}
  }
  /// Returns true if `url` has been explicitly set.
  var hasURL: Bool {return self._url != nil}
  /// Clears the value of `url`. Subsequent reads from it will return its default value.
  mutating func clearURL() {self._url = nil}

  /// Source-specific properties
  var sourceProperties: Dictionary<String,CoreSdk_V1_Value> = [:]

  /// heapjs:pr
  var previousPage: String {
    get {return _previousPage ?? String()}
    set {_previousPage = newValue}
  }
  /// Returns true if `previousPage` has been explicitly set.
  var hasPreviousPage: Bool {return self._previousPage != nil}
  /// Clears the value of `previousPage`. Subsequent reads from it will return its default value.
  mutating func clearPreviousPage() {self._previousPage = nil}

  /// custom pageview properties (heapjs:k)
  var properties: Dictionary<String,CoreSdk_V1_Value> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Url message definition
  struct Url {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var domain: String = String()

    var path: String = String()

    var query: String = String()

    var hash: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _time: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _componentOrClassName: String? = nil
  fileprivate var _title: String? = nil
  fileprivate var _url: CoreSdk_V1_PageviewInfo.Url? = nil
  fileprivate var _previousPage: String? = nil
}

struct CoreSdk_V1_Utm {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var source: String = String()

  var medium: String = String()

  var term: String = String()

  var content: String = String()

  var campaign: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension CoreSdk_V1_Value: @unchecked Sendable {}
extension CoreSdk_V1_LibraryInfo: @unchecked Sendable {}
extension CoreSdk_V1_ApplicationInfo: @unchecked Sendable {}
extension CoreSdk_V1_UserAgentClientHintsInfo: @unchecked Sendable {}
extension CoreSdk_V1_DeviceInfo: @unchecked Sendable {}
extension CoreSdk_V1_DeviceInfo.DeviceType: @unchecked Sendable {}
extension CoreSdk_V1_SessionInfo: @unchecked Sendable {}
extension CoreSdk_V1_PageviewInfo: @unchecked Sendable {}
extension CoreSdk_V1_PageviewInfo.Url: @unchecked Sendable {}
extension CoreSdk_V1_Utm: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "core_sdk.v1"

extension CoreSdk_V1_Value: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Value"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "string"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.string) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.string.isEmpty {
      try visitor.visitSingularStringField(value: self.string, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreSdk_V1_Value, rhs: CoreSdk_V1_Value) -> Bool {
    if lhs.string != rhs.string {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreSdk_V1_LibraryInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LibraryInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "version"),
    3: .same(proto: "platform"),
    4: .same(proto: "properties"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.platform) }()
      case 4: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,CoreSdk_V1_Value>.self, value: &self.properties) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 2)
    }
    if !self.platform.isEmpty {
      try visitor.visitSingularStringField(value: self.platform, fieldNumber: 3)
    }
    if !self.properties.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,CoreSdk_V1_Value>.self, value: self.properties, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreSdk_V1_LibraryInfo, rhs: CoreSdk_V1_LibraryInfo) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.version != rhs.version {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs.properties != rhs.properties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreSdk_V1_ApplicationInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ApplicationInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "identifier"),
    3: .standard(proto: "version_string"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._identifier) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._versionString) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._identifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._versionString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreSdk_V1_ApplicationInfo, rhs: CoreSdk_V1_ApplicationInfo) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._identifier != rhs._identifier {return false}
    if lhs._versionString != rhs._versionString {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreSdk_V1_UserAgentClientHintsInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserAgentClientHintsInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "platform_version"),
    2: .standard(proto: "browser_version"),
    3: .same(proto: "model"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.platformVersion) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.browserVersion) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._model) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.platformVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.platformVersion, fieldNumber: 1)
    }
    if !self.browserVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.browserVersion, fieldNumber: 2)
    }
    try { if let v = self._model {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreSdk_V1_UserAgentClientHintsInfo, rhs: CoreSdk_V1_UserAgentClientHintsInfo) -> Bool {
    if lhs.platformVersion != rhs.platformVersion {return false}
    if lhs.browserVersion != rhs.browserVersion {return false}
    if lhs._model != rhs._model {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreSdk_V1_DeviceInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "model"),
    2: .same(proto: "platform"),
    3: .standard(proto: "user_agent"),
    4: .same(proto: "type"),
    5: .same(proto: "carrier"),
    6: .standard(proto: "vendor_id"),
    7: .standard(proto: "advertiser_id"),
    13: .same(proto: "uach"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.model) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.platform) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._userAgent) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._carrier) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._vendorID) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._advertiserID) }()
      case 13: try { try decoder.decodeSingularMessageField(value: &self._uach) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.model.isEmpty {
      try visitor.visitSingularStringField(value: self.model, fieldNumber: 1)
    }
    if !self.platform.isEmpty {
      try visitor.visitSingularStringField(value: self.platform, fieldNumber: 2)
    }
    try { if let v = self._userAgent {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    if self.type != .unknownUnspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 4)
    }
    try { if let v = self._carrier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._vendorID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._advertiserID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._uach {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreSdk_V1_DeviceInfo, rhs: CoreSdk_V1_DeviceInfo) -> Bool {
    if lhs.model != rhs.model {return false}
    if lhs.platform != rhs.platform {return false}
    if lhs._userAgent != rhs._userAgent {return false}
    if lhs.type != rhs.type {return false}
    if lhs._carrier != rhs._carrier {return false}
    if lhs._vendorID != rhs._vendorID {return false}
    if lhs._advertiserID != rhs._advertiserID {return false}
    if lhs._uach != rhs._uach {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreSdk_V1_DeviceInfo.DeviceType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEVICE_TYPE_UNKNOWN_UNSPECIFIED"),
    1: .same(proto: "DEVICE_TYPE_MOBILE"),
    2: .same(proto: "DEVICE_TYPE_TABLET"),
    3: .same(proto: "DEVICE_TYPE_DESKTOP"),
    4: .same(proto: "DEVICE_TYPE_TV"),
    5: .same(proto: "DEVICE_TYPE_WATCH"),
    6: .same(proto: "DEVICE_TYPE_AUTOMOTIVE"),
  ]
}

extension CoreSdk_V1_SessionInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SessionInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "time"),
    3: .same(proto: "referrer"),
    4: .standard(proto: "search_keyword"),
    5: .same(proto: "utm"),
    6: .standard(proto: "initial_pageview_info"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _time: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _referrer: String? = nil
    var _searchKeyword: String? = nil
    var _utm: CoreSdk_V1_Utm? = nil
    var _initialPageviewInfo: CoreSdk_V1_PageviewInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _time = source._time
      _referrer = source._referrer
      _searchKeyword = source._searchKeyword
      _utm = source._utm
      _initialPageviewInfo = source._initialPageviewInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._time) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._referrer) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._searchKeyword) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._utm) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._initialPageviewInfo) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      try { if let v = _storage._time {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._referrer {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._searchKeyword {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._utm {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._initialPageviewInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreSdk_V1_SessionInfo, rhs: CoreSdk_V1_SessionInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._time != rhs_storage._time {return false}
        if _storage._referrer != rhs_storage._referrer {return false}
        if _storage._searchKeyword != rhs_storage._searchKeyword {return false}
        if _storage._utm != rhs_storage._utm {return false}
        if _storage._initialPageviewInfo != rhs_storage._initialPageviewInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreSdk_V1_PageviewInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PageviewInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "time"),
    3: .standard(proto: "component_or_class_name"),
    4: .same(proto: "title"),
    5: .same(proto: "url"),
    6: .standard(proto: "source_properties"),
    7: .standard(proto: "previous_page"),
    8: .same(proto: "properties"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._time) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._componentOrClassName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._title) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._url) }()
      case 6: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,CoreSdk_V1_Value>.self, value: &self.sourceProperties) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._previousPage) }()
      case 8: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,CoreSdk_V1_Value>.self, value: &self.properties) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._time {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._componentOrClassName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._title {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._url {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.sourceProperties.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,CoreSdk_V1_Value>.self, value: self.sourceProperties, fieldNumber: 6)
    }
    try { if let v = self._previousPage {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    if !self.properties.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,CoreSdk_V1_Value>.self, value: self.properties, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreSdk_V1_PageviewInfo, rhs: CoreSdk_V1_PageviewInfo) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._time != rhs._time {return false}
    if lhs._componentOrClassName != rhs._componentOrClassName {return false}
    if lhs._title != rhs._title {return false}
    if lhs._url != rhs._url {return false}
    if lhs.sourceProperties != rhs.sourceProperties {return false}
    if lhs._previousPage != rhs._previousPage {return false}
    if lhs.properties != rhs.properties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreSdk_V1_PageviewInfo.Url: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = CoreSdk_V1_PageviewInfo.protoMessageName + ".Url"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "domain"),
    2: .same(proto: "path"),
    3: .same(proto: "query"),
    4: .same(proto: "hash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.domain) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.path) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.query) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.domain.isEmpty {
      try visitor.visitSingularStringField(value: self.domain, fieldNumber: 1)
    }
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 2)
    }
    if !self.query.isEmpty {
      try visitor.visitSingularStringField(value: self.query, fieldNumber: 3)
    }
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreSdk_V1_PageviewInfo.Url, rhs: CoreSdk_V1_PageviewInfo.Url) -> Bool {
    if lhs.domain != rhs.domain {return false}
    if lhs.path != rhs.path {return false}
    if lhs.query != rhs.query {return false}
    if lhs.hash != rhs.hash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CoreSdk_V1_Utm: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Utm"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "source"),
    2: .same(proto: "medium"),
    3: .same(proto: "term"),
    4: .same(proto: "content"),
    5: .same(proto: "campaign"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.source) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.medium) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.term) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.content) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.campaign) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.source.isEmpty {
      try visitor.visitSingularStringField(value: self.source, fieldNumber: 1)
    }
    if !self.medium.isEmpty {
      try visitor.visitSingularStringField(value: self.medium, fieldNumber: 2)
    }
    if !self.term.isEmpty {
      try visitor.visitSingularStringField(value: self.term, fieldNumber: 3)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 4)
    }
    if !self.campaign.isEmpty {
      try visitor.visitSingularStringField(value: self.campaign, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CoreSdk_V1_Utm, rhs: CoreSdk_V1_Utm) -> Bool {
    if lhs.source != rhs.source {return false}
    if lhs.medium != rhs.medium {return false}
    if lhs.term != rhs.term {return false}
    if lhs.content != rhs.content {return false}
    if lhs.campaign != rhs.campaign {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
