// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: SessionInfo.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SessionInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var time: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _time ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return self._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {self._time = nil}

  var referrer: String {
    get {return _referrer ?? String()}
    set {_referrer = newValue}
  }
  /// Returns true if `referrer` has been explicitly set.
  var hasReferrer: Bool {return self._referrer != nil}
  /// Clears the value of `referrer`. Subsequent reads from it will return its default value.
  mutating func clearReferrer() {self._referrer = nil}

  var searchKeyword: String {
    get {return _searchKeyword ?? String()}
    set {_searchKeyword = newValue}
  }
  /// Returns true if `searchKeyword` has been explicitly set.
  var hasSearchKeyword: Bool {return self._searchKeyword != nil}
  /// Clears the value of `searchKeyword`. Subsequent reads from it will return its default value.
  mutating func clearSearchKeyword() {self._searchKeyword = nil}

  var utm: SessionInfo.Utm {
    get {return _utm ?? SessionInfo.Utm()}
    set {_utm = newValue}
  }
  /// Returns true if `utm` has been explicitly set.
  var hasUtm: Bool {return self._utm != nil}
  /// Clears the value of `utm`. Subsequent reads from it will return its default value.
  mutating func clearUtm() {self._utm = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Utm {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var source: String = String()

    var medium: String = String()

    var term: String = String()

    var content: String = String()

    var campaign: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _time: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _referrer: String? = nil
  fileprivate var _searchKeyword: String? = nil
  fileprivate var _utm: SessionInfo.Utm? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension SessionInfo: @unchecked Sendable {}
extension SessionInfo.Utm: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension SessionInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SessionInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "time"),
    3: .same(proto: "referrer"),
    4: .standard(proto: "search_keyword"),
    5: .same(proto: "utm"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._time) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._referrer) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._searchKeyword) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._utm) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._time {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._referrer {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._searchKeyword {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._utm {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SessionInfo, rhs: SessionInfo) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._time != rhs._time {return false}
    if lhs._referrer != rhs._referrer {return false}
    if lhs._searchKeyword != rhs._searchKeyword {return false}
    if lhs._utm != rhs._utm {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SessionInfo.Utm: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SessionInfo.protoMessageName + ".Utm"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "source"),
    2: .same(proto: "medium"),
    3: .same(proto: "term"),
    4: .same(proto: "content"),
    5: .same(proto: "campaign"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.source) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.medium) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.term) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.content) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.campaign) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.source.isEmpty {
      try visitor.visitSingularStringField(value: self.source, fieldNumber: 1)
    }
    if !self.medium.isEmpty {
      try visitor.visitSingularStringField(value: self.medium, fieldNumber: 2)
    }
    if !self.term.isEmpty {
      try visitor.visitSingularStringField(value: self.term, fieldNumber: 3)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 4)
    }
    if !self.campaign.isEmpty {
      try visitor.visitSingularStringField(value: self.campaign, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SessionInfo.Utm, rhs: SessionInfo.Utm) -> Bool {
    if lhs.source != rhs.source {return false}
    if lhs.medium != rhs.medium {return false}
    if lhs.term != rhs.term {return false}
    if lhs.content != rhs.content {return false}
    if lhs.campaign != rhs.campaign {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
