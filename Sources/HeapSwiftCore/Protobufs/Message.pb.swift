// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Message {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var envID: String {
    get {return _storage._envID}
    set {_uniqueStorage()._envID = newValue}
  }

  var userID: String {
    get {return _storage._userID}
    set {_uniqueStorage()._userID = newValue}
  }

  var time: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._time ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return _storage._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {_uniqueStorage()._time = nil}

  /// The libary that implements base functionality.
  var baseLibrary: LibraryInfo {
    get {return _storage._baseLibrary ?? LibraryInfo()}
    set {_uniqueStorage()._baseLibrary = newValue}
  }
  /// Returns true if `baseLibrary` has been explicitly set.
  var hasBaseLibrary: Bool {return _storage._baseLibrary != nil}
  /// Clears the value of `baseLibrary`. Subsequent reads from it will return its default value.
  mutating func clearBaseLibrary() {_uniqueStorage()._baseLibrary = nil}

  /// The libary providing autocapture or language bridging.
  var sourceLibrary: LibraryInfo {
    get {return _storage._sourceLibrary ?? LibraryInfo()}
    set {_uniqueStorage()._sourceLibrary = newValue}
  }
  /// Returns true if `sourceLibrary` has been explicitly set.
  var hasSourceLibrary: Bool {return _storage._sourceLibrary != nil}
  /// Clears the value of `sourceLibrary`. Subsequent reads from it will return its default value.
  mutating func clearSourceLibrary() {_uniqueStorage()._sourceLibrary = nil}

  var application: ApplicationInfo {
    get {return _storage._application ?? ApplicationInfo()}
    set {_uniqueStorage()._application = newValue}
  }
  /// Returns true if `application` has been explicitly set.
  var hasApplication: Bool {return _storage._application != nil}
  /// Clears the value of `application`. Subsequent reads from it will return its default value.
  mutating func clearApplication() {_uniqueStorage()._application = nil}

  var device: DeviceInfo {
    get {return _storage._device ?? DeviceInfo()}
    set {_uniqueStorage()._device = newValue}
  }
  /// Returns true if `device` has been explicitly set.
  var hasDevice: Bool {return _storage._device != nil}
  /// Clears the value of `device`. Subsequent reads from it will return its default value.
  mutating func clearDevice() {_uniqueStorage()._device = nil}

  var sessionInfo: SessionInfo {
    get {return _storage._sessionInfo ?? SessionInfo()}
    set {_uniqueStorage()._sessionInfo = newValue}
  }
  /// Returns true if `sessionInfo` has been explicitly set.
  var hasSessionInfo: Bool {return _storage._sessionInfo != nil}
  /// Clears the value of `sessionInfo`. Subsequent reads from it will return its default value.
  mutating func clearSessionInfo() {_uniqueStorage()._sessionInfo = nil}

  /// Null only for sessions
  var pageviewInfo: PageviewInfo {
    get {return _storage._pageviewInfo ?? PageviewInfo()}
    set {_uniqueStorage()._pageviewInfo = newValue}
  }
  /// Returns true if `pageviewInfo` has been explicitly set.
  var hasPageviewInfo: Bool {return _storage._pageviewInfo != nil}
  /// Clears the value of `pageviewInfo`. Subsequent reads from it will return its default value.
  mutating func clearPageviewInfo() {_uniqueStorage()._pageviewInfo = nil}

  /// Set with addEventProperties
  var properties: Dictionary<String,Value> {
    get {return _storage._properties}
    set {_uniqueStorage()._properties = newValue}
  }

  var kind: OneOf_Kind? {
    get {return _storage._kind}
    set {_uniqueStorage()._kind = newValue}
  }

  var session: SwiftProtobuf.Google_Protobuf_Empty {
    get {
      if case .session(let v)? = _storage._kind {return v}
      return SwiftProtobuf.Google_Protobuf_Empty()
    }
    set {_uniqueStorage()._kind = .session(newValue)}
  }

  var pageview: SwiftProtobuf.Google_Protobuf_Empty {
    get {
      if case .pageview(let v)? = _storage._kind {return v}
      return SwiftProtobuf.Google_Protobuf_Empty()
    }
    set {_uniqueStorage()._kind = .pageview(newValue)}
  }

  var event: Event {
    get {
      if case .event(let v)? = _storage._kind {return v}
      return Event()
    }
    set {_uniqueStorage()._kind = .event(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Kind: Equatable {
    case session(SwiftProtobuf.Google_Protobuf_Empty)
    case pageview(SwiftProtobuf.Google_Protobuf_Empty)
    case event(Event)

  #if !swift(>=4.1)
    static func ==(lhs: Message.OneOf_Kind, rhs: Message.OneOf_Kind) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.session, .session): return {
        guard case .session(let l) = lhs, case .session(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pageview, .pageview): return {
        guard case .pageview(let l) = lhs, case .pageview(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.event, .event): return {
        guard case .event(let l) = lhs, case .event(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Message: @unchecked Sendable {}
extension Message.OneOf_Kind: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Message"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "env_id"),
    3: .standard(proto: "user_id"),
    4: .same(proto: "time"),
    5: .standard(proto: "base_library"),
    6: .standard(proto: "source_library"),
    7: .same(proto: "application"),
    8: .same(proto: "device"),
    9: .standard(proto: "session_info"),
    10: .standard(proto: "pageview_info"),
    11: .same(proto: "properties"),
    12: .same(proto: "session"),
    13: .same(proto: "pageview"),
    14: .same(proto: "event"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _envID: String = String()
    var _userID: String = String()
    var _time: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _baseLibrary: LibraryInfo? = nil
    var _sourceLibrary: LibraryInfo? = nil
    var _application: ApplicationInfo? = nil
    var _device: DeviceInfo? = nil
    var _sessionInfo: SessionInfo? = nil
    var _pageviewInfo: PageviewInfo? = nil
    var _properties: Dictionary<String,Value> = [:]
    var _kind: Message.OneOf_Kind?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _envID = source._envID
      _userID = source._userID
      _time = source._time
      _baseLibrary = source._baseLibrary
      _sourceLibrary = source._sourceLibrary
      _application = source._application
      _device = source._device
      _sessionInfo = source._sessionInfo
      _pageviewInfo = source._pageviewInfo
      _properties = source._properties
      _kind = source._kind
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._envID) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._userID) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._time) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._baseLibrary) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._sourceLibrary) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._application) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._device) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._sessionInfo) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._pageviewInfo) }()
        case 11: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Value>.self, value: &_storage._properties) }()
        case 12: try {
          var v: SwiftProtobuf.Google_Protobuf_Empty?
          var hadOneofValue = false
          if let current = _storage._kind {
            hadOneofValue = true
            if case .session(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._kind = .session(v)
          }
        }()
        case 13: try {
          var v: SwiftProtobuf.Google_Protobuf_Empty?
          var hadOneofValue = false
          if let current = _storage._kind {
            hadOneofValue = true
            if case .pageview(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._kind = .pageview(v)
          }
        }()
        case 14: try {
          var v: Event?
          var hadOneofValue = false
          if let current = _storage._kind {
            hadOneofValue = true
            if case .event(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._kind = .event(v)
          }
        }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._envID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._envID, fieldNumber: 2)
      }
      if !_storage._userID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userID, fieldNumber: 3)
      }
      try { if let v = _storage._time {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._baseLibrary {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._sourceLibrary {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._application {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._device {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._sessionInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._pageviewInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      if !_storage._properties.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Value>.self, value: _storage._properties, fieldNumber: 11)
      }
      switch _storage._kind {
      case .session?: try {
        guard case .session(let v)? = _storage._kind else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }()
      case .pageview?: try {
        guard case .pageview(let v)? = _storage._kind else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }()
      case .event?: try {
        guard case .event(let v)? = _storage._kind else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }()
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Message, rhs: Message) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._envID != rhs_storage._envID {return false}
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._time != rhs_storage._time {return false}
        if _storage._baseLibrary != rhs_storage._baseLibrary {return false}
        if _storage._sourceLibrary != rhs_storage._sourceLibrary {return false}
        if _storage._application != rhs_storage._application {return false}
        if _storage._device != rhs_storage._device {return false}
        if _storage._sessionInfo != rhs_storage._sessionInfo {return false}
        if _storage._pageviewInfo != rhs_storage._pageviewInfo {return false}
        if _storage._properties != rhs_storage._properties {return false}
        if _storage._kind != rhs_storage._kind {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
