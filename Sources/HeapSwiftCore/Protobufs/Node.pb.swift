// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Node.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A node in the hierarchy of the app or web page.  This can represent a DOM
/// element, a UIResponder, a View, or something else entirely.
struct Node {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The element or component name for DOM elements, or the class name for views.
  var nodeName: String = String()

  /// The on-screen text within the element, truncated to 1024 UTF-16 code-units.
  var nodeText: String {
    get {return _nodeText ?? String()}
    set {_nodeText = newValue}
  }
  /// Returns true if `nodeText` has been explicitly set.
  var hasNodeText: Bool {return self._nodeText != nil}
  /// Clears the value of `nodeText`. Subsequent reads from it will return its default value.
  mutating func clearNodeText() {self._nodeText = nil}

  /// Traits that are applied to the element that can be used for filtering
  /// (e.g., individual class names on the web).
  var nodeTraits: [String] = []

  /// The unique ID for the node in its context (e.g., id in HTML, android:id on
  /// Android).
  var id: String {
    get {return _id ?? String()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  /// The developer-defined accessibility or testing identifier.
  var accessibilityIdentifier: String {
    get {return _accessibilityIdentifier ?? String()}
    set {_accessibilityIdentifier = newValue}
  }
  /// Returns true if `accessibilityIdentifier` has been explicitly set.
  var hasAccessibilityIdentifier: Bool {return self._accessibilityIdentifier != nil}
  /// Clears the value of `accessibilityIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearAccessibilityIdentifier() {self._accessibilityIdentifier = nil}

  /// The developer-defined accessibility label, truncated to 1024 UTF-16 code-units.
  var accessibilityLabel: String {
    get {return _accessibilityLabel ?? String()}
    set {_accessibilityLabel = newValue}
  }
  /// Returns true if `accessibilityLabel` has been explicitly set.
  var hasAccessibilityLabel: Bool {return self._accessibilityLabel != nil}
  /// Clears the value of `accessibilityLabel`. Subsequent reads from it will return its default value.
  mutating func clearAccessibilityLabel() {self._accessibilityLabel = nil}

  /// The name of a variable containing the node in the owning controller, if
  /// available.
  var referencingPropertyName: String {
    get {return _referencingPropertyName ?? String()}
    set {_referencingPropertyName = newValue}
  }
  /// Returns true if `referencingPropertyName` has been explicitly set.
  var hasReferencingPropertyName: Bool {return self._referencingPropertyName != nil}
  /// Clears the value of `referencingPropertyName`. Subsequent reads from it will return its default value.
  mutating func clearReferencingPropertyName() {self._referencingPropertyName = nil}

  /// Source-specific properties of the node that do not map to an above category.
  /// Keys limited to 512 UTF-16 code units.  Values limited to 1024 UTF-16 code
  /// units.
  var sourceProperties: Dictionary<String,Value> = [:]

  /// Developer-defined attributes. (e.g., HTML or React Native attributes).
  var attributes: Dictionary<String,Value> = [:]

  /// An optional representation of the bounding box with the origin in the top-left
  /// corner of the screen.
  ///
  /// This will be used for Event Visualizer in the future.
  var boundingBox: BoundingBox {
    get {return _boundingBox ?? BoundingBox()}
    set {_boundingBox = newValue}
  }
  /// Returns true if `boundingBox` has been explicitly set.
  var hasBoundingBox: Bool {return self._boundingBox != nil}
  /// Clears the value of `boundingBox`. Subsequent reads from it will return its default value.
  mutating func clearBoundingBox() {self._boundingBox = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _nodeText: String? = nil
  fileprivate var _id: String? = nil
  fileprivate var _accessibilityIdentifier: String? = nil
  fileprivate var _accessibilityLabel: String? = nil
  fileprivate var _referencingPropertyName: String? = nil
  fileprivate var _boundingBox: BoundingBox? = nil
}

struct Point {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var x: Int32 = 0

  var y: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Dimensions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var width: UInt32 = 0

  var height: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct BoundingBox {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var position: Point {
    get {return _position ?? Point()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  mutating func clearPosition() {self._position = nil}

  var size: Dimensions {
    get {return _size ?? Dimensions()}
    set {_size = newValue}
  }
  /// Returns true if `size` has been explicitly set.
  var hasSize: Bool {return self._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
  mutating func clearSize() {self._size = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _position: Point? = nil
  fileprivate var _size: Dimensions? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Node: @unchecked Sendable {}
extension Point: @unchecked Sendable {}
extension Dimensions: @unchecked Sendable {}
extension BoundingBox: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Node: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Node"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "node_name"),
    2: .standard(proto: "node_text"),
    3: .standard(proto: "node_traits"),
    4: .same(proto: "id"),
    5: .standard(proto: "accessibility_identifier"),
    6: .standard(proto: "accessibility_label"),
    7: .standard(proto: "referencing_property_name"),
    20: .standard(proto: "source_properties"),
    21: .same(proto: "attributes"),
    22: .standard(proto: "bounding_box"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.nodeName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._nodeText) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.nodeTraits) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._accessibilityIdentifier) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._accessibilityLabel) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._referencingPropertyName) }()
      case 20: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Value>.self, value: &self.sourceProperties) }()
      case 21: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Value>.self, value: &self.attributes) }()
      case 22: try { try decoder.decodeSingularMessageField(value: &self._boundingBox) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.nodeName.isEmpty {
      try visitor.visitSingularStringField(value: self.nodeName, fieldNumber: 1)
    }
    try { if let v = self._nodeText {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    if !self.nodeTraits.isEmpty {
      try visitor.visitRepeatedStringField(value: self.nodeTraits, fieldNumber: 3)
    }
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._accessibilityIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._accessibilityLabel {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._referencingPropertyName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    if !self.sourceProperties.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Value>.self, value: self.sourceProperties, fieldNumber: 20)
    }
    if !self.attributes.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Value>.self, value: self.attributes, fieldNumber: 21)
    }
    try { if let v = self._boundingBox {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Node, rhs: Node) -> Bool {
    if lhs.nodeName != rhs.nodeName {return false}
    if lhs._nodeText != rhs._nodeText {return false}
    if lhs.nodeTraits != rhs.nodeTraits {return false}
    if lhs._id != rhs._id {return false}
    if lhs._accessibilityIdentifier != rhs._accessibilityIdentifier {return false}
    if lhs._accessibilityLabel != rhs._accessibilityLabel {return false}
    if lhs._referencingPropertyName != rhs._referencingPropertyName {return false}
    if lhs.sourceProperties != rhs.sourceProperties {return false}
    if lhs.attributes != rhs.attributes {return false}
    if lhs._boundingBox != rhs._boundingBox {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Point: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Point"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.x) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.y) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x != 0 {
      try visitor.visitSingularInt32Field(value: self.x, fieldNumber: 1)
    }
    if self.y != 0 {
      try visitor.visitSingularInt32Field(value: self.y, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Point, rhs: Point) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dimensions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Dimensions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "width"),
    2: .same(proto: "height"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.width) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.height) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.width != 0 {
      try visitor.visitSingularUInt32Field(value: self.width, fieldNumber: 1)
    }
    if self.height != 0 {
      try visitor.visitSingularUInt32Field(value: self.height, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Dimensions, rhs: Dimensions) -> Bool {
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension BoundingBox: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "BoundingBox"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "position"),
    2: .same(proto: "size"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._size) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._size {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: BoundingBox, rhs: BoundingBox) -> Bool {
    if lhs._position != rhs._position {return false}
    if lhs._size != rhs._size {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
